alloy:
  configMap:
    # https://grafana.com/docs/alloy/latest/collect/logs-in-kubernetes/
    content: |
      // loki.source.kubernetes_events tails events from the Kubernetes API and converts them
      // into log lines to forward to other Loki components.
      loki.source.kubernetes_events "cluster_events" {
        job_name   = "integrations/kubernetes/eventhandler"
        log_format = "json"
        forward_to = [
          loki.process.cluster_events.receiver,
        ]
      }

      // loki.process receives log entries from other loki components, applies one or more processing stages,
      // and forwards the results to the list of receivers in the component's arguments.
      loki.process "cluster_events" {
        stage.static_labels {
          values = {
            cluster = "moto-a1",
            job = "k8s-events",
          }
        }
      
        stage.json {
          expressions = {
            type = "",
            node = "reportinginstance",
          }
        }
        stage.labels {
          values = {
            type = "",
            node = "",
          }
        }
      
        forward_to = [loki.write.vl.receiver, otelcol.receiver.loki.gcp_logs.receiver]
      }
      
      loki.write "vl" {
        endpoint {
          url = "http://vl-victoria-logs-single-server.victoria-logs.svc.cluster.local:9428/insert/loki/api/v1/push?_msg_field=msg&_stream_fields=job,cluster"
        }
      }
      
      otelcol.receiver.loki "gcp_logs" {
        output {
          logs = [otelcol.processor.memory_limiter.gcp_logs.input]
        }
      }
      
      otelcol.processor.memory_limiter "gcp_logs" {
        check_interval = "1s"
        limit = "500MiB"
      
        output {
          metrics = [otelcol.processor.batch.gcp_logs.input]
          logs = [otelcol.processor.batch.gcp_logs.input]
          traces = [otelcol.processor.batch.gcp_logs.input]
        }
      }
      
      otelcol.processor.batch "gcp_logs" {
        output {
          metrics = [otelcol.exporter.googlecloud.gcp_logs.input]
          logs = [otelcol.exporter.googlecloud.gcp_logs.input]
          traces = [otelcol.exporter.googlecloud.gcp_logs.input]
        }
      }
      
      otelcol.exporter.googlecloud "gcp_logs" {
        log {
          default_log_name = "opentelemetry.io/collector-exported-log"
        }
      }

  extraArgs:
    - --feature.community-components.enabled=true
  extraEnv:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /etc/otelcol-contrib/key.json
  mounts:
    extra:
      - name: sa
        mountPath: /etc/otelcol-contrib/key.json
        subPath: key.json

crds:
  create: false

image:
  pullPolicy: Always

controller:
  type: deployment
  volumes:
    extra:
      - name: sa
        secret:
          secretName: sa
