global:
  domain: cd.toki317.dev

repoServer:
  volumes:
    # https://github.com/argoproj/argo-cd/issues/5202#issuecomment-2081661930
    - name: helm-replace
      configMap:
        name: helm-replace
        defaultMode: 0777
    # https://github.com/viaduct-ai/kustomize-sops#argo-cd-integration-
    # 1. Define an emptyDir volume which will hold the custom binaries
    - name: custom-tools
      emptyDir: {}
    - name: age-key
      secret:
        secretName: age-key

  # https://github.com/viaduct-ai/kustomize-sops#argo-cd-integration-
  # 2. Use an init container to download/copy custom binaries into the emptyDir
  initContainers:
    - name: install-ksops
      image: alpine:latest
      command: ["/bin/sh", "-c"]
      args:
        - |
          set -eux
          apk add --no-cache ca-certificates curl tar
          case "$(uname -m)" in
            x86_64|amd64) ARCH="x86_64" ;;
            aarch64|arm64) ARCH="arm64" ;;
            *) echo "unsupported arch: $(uname -m)"; exit 1 ;;
          esac
          # renovate:general datasource=github-releases depName=viaduct-ai/kustomize-sops
          # VERSION="v4.4.0"
          # VERSION_STRIPPED="${VERSION#v}"
          # URL="https://github.com/viaduct-ai/kustomize-sops/releases/download/${VERSION}/ksops_${VERSION_STRIPPED}_Linux_${ARCH}.tar.gz"
          # renovate:general datasource=github-releases depName=motoki317/kustomize-sops
          VERSION="v4.4.1"
          VERSION_STRIPPED="${VERSION#v}"
          URL="https://github.com/motoki317/kustomize-sops/releases/download/${VERSION}/ksops_${VERSION_STRIPPED}_Linux_${ARCH}.tar.gz"
          curl -fsSL -o ksops.tar.gz "${URL}"
          tar -C /custom-tools -xzf ksops.tar.gz ksops
          chmod +x /custom-tools/ksops
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools

  volumeMounts:
    - name: helm-replace
      mountPath: /usr/local/sbin/helm
      subPath: helm
    # https://github.com/viaduct-ai/kustomize-sops#argo-cd-integration-
    # 3. Volume mount the custom binary to the bin directory
    - mountPath: /usr/local/bin/ksops
      name: custom-tools
      subPath: ksops
    - mountPath: /age-key/key.txt
      name: age-key
      subPath: key.txt

  env:
    - name: HELM_BIN
      value: /usr/local/bin/helm
    - name: SOPS_AGE_KEY_FILE
      value: /age-key/key.txt

configs:
  cm:
    kustomize.buildOptions: "--enable-alpha-plugins --enable-exec --load-restrictor LoadRestrictionsNone --enable-helm"
    # https://argo-cd.readthedocs.io/en/stable/user-guide/resource_tracking/
    application.resourceTrackingMethod: "annotation"
    ui.bannercontent: "Production"
    ui.bannerpermanent: "true"

    # https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#existing-oidc-provider
    oidc.config: |
      name: traQ
      issuer: https://q.toki317.dev
      clientID: "p6957nUX0J0Ag7T9yJcgWIDz1SH23jopkLPN"
      clientSecret: $oidc.traq.clientSecret
      requestedScopes: ["openid", "read", "profile"]

  # https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/additional-configuration-method/
  params:
    controller.log.level: "warn"
    server.insecure: "true"
    server.log.level: "warn"
    reposerver.log.level: "warn"
    applicationsetcontroller.log.level: "warn"
    notificationscontroller.log.level: "warn"

  secret:
    createSecret: false

  # https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/
  rbac:
    policy.default: "role:readonly"
    # 8a1feae7-8a8d-4449-8566-478d2d8decfa: toki
    policy.csv: |
      g, 8a1feae7-8a8d-4449-8566-478d2d8decfa, role:admin

  styles: |
    .ui-banner-text {
      color: #f8f8f8;
    }
    .ui-banner {
      background-color: #e50808;
    }

# Default templates and triggers: https://github.com/argoproj/argo-cd/blob/master/notifications_catalog/install.yaml
notifications:
  secret:
    create: false
  notifiers:
    service.webhook.traq: |
      url: https://q.toki317.dev/api/v3/webhooks/$traq-webhook-id
      headers:
        - name: Content-Type
          value: "text/plain; charset=utf-8"
        - name: X-TRAQ-Channel-Id
          value: a978e6a0-43ab-48b7-9224-70de36c3b183
  subscriptions:
    - recipients:
        - traq
      selector: skip-default-notification!=true
      triggers:
        - on-created
        - on-deleted
        - on-deployed
        - on-health-degraded
        - on-sync-failed
        - on-sync-running
        - on-sync-status-unknown

  templates:
    template.app-created: |
      webhook:
        traq:
          method: POST
          body: |
            ### :new: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Created :new:
    template.app-deleted: |
      webhook:
        traq:
          method: POST
          body: |
            ### :ayase_null: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Deleted :ayase_null:
    template.app-deployed: |
      webhook:
        traq:
          method: POST
          body: |
            ### :mokuri_love: [{{ .app.metadata.name }}]({{ .context.argocdUrl }}/applications/{{ .app.metadata.name }}) for [`{{ substr 0 7 .app.status.sync.revision }}`](//github.com/motoki317/manifest/commit/{{ .app.status.sync.revision }}) Deployed :mokuri_love:
    template.app-health-degraded: |
      webhook:
        traq:
          method: POST
          body: |
            ### :alert: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Degraded :alert:
            {{range $c := .app.status.conditions}}
            **{{$c.type}}**: {{$c.message}}
            {{end}}
    template.app-sync-failed: |
      webhook:
        traq:
          method: POST
          body: |
            ### :exclamation: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Sync Failed :exclamation:
            {{range $c := .app.status.conditions}}
            **{{$c.type}}**: {{$c.message}}
            {{end}}
    template.app-sync-running: |
      webhook:
        traq:
          method: POST
          body: |
            ### :spinner: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Syncing :spinner:
    template.app-sync-status-unknown: |
      webhook:
        traq:
          method: POST
          body: |
            ### :question: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Sync Status Unknown :question:
            {{range $c := .app.status.conditions}}
            **{{$c.type}}**: {{$c.message}}
            {{end}}

  triggers:
    trigger.on-created: |
      - description: Application is created.
        oncePer: app.metadata.name
        send:
        - app-created
        when: "true"
    trigger.on-deleted: |
      - description: Application is deleted.
        oncePer: app.metadata.name
        send:
        - app-deleted
        when: app.metadata.deletionTimestamp != nil
    trigger.on-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.operationState.startedAt
        send:
        - app-deployed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
    trigger.on-preview-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.operationState.startedAt
        send:
        - app-preview-deployed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
    trigger.on-health-degraded: |
      - description: Application has degraded
        send:
        - app-health-degraded
        when: app.status.health.status == 'Degraded'
    trigger.on-sync-failed: |
      - description: Application syncing has failed
        send:
        - app-sync-failed
        when: app.status.operationState.phase in ['Error', 'Failed']
    trigger.on-sync-running: |
      - description: Application is being synced
        send:
        - app-sync-running
        when: app.status.operationState.phase in ['Running']
    trigger.on-sync-status-unknown: |
      - description: Application status is 'Unknown'
        send:
        - app-sync-status-unknown
        when: app.status.sync.status == 'Unknown'
    trigger.on-sync-succeeded: |
      - description: Application syncing has succeeded
        send:
        - app-sync-succeeded
        when: app.status.operationState.phase in ['Succeeded']
